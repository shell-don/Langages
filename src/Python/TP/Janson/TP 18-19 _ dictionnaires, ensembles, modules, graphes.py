#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Author : Mathis PigassouCorrection des Travaux Pratiques :     TP 18 _ dictionnaires, ensembles, modules, graphes    TP 19 - graphes 2"""import numpy as npclass graph():    """    Classe gérant les graphes sous forme de dictionnaire.    En l'état actuel, les graphes peuvent être orientés, mais ne sont pas pondérés.        """    def __init__(self,dico):        """        initialise un nouveau graphe si l'on fournit un dictionnaire "dico".        """        self.noeuds = set({})        self.taille = 0        self.dico = {}        for k in dico:            self.taille += 1            self.noeuds.add(k)            self.dico[k] = dico[k]                            def ajout_noeud(self, nouveau_noeud, liens_sortant, liens_entrant):        """        Ajoute un noeud à un graphe ainsi que les liens sortant et entrants à ce nouveau noeud.        - nouveau_noeud est une chaîne de caractères (le nom du nouveau noeud)        - liens_sortant est un ensemble de noms de noeuds : si a appartient à cet ensemble,          on ajoute le lien nouveau_noeud -> a au graphe        - liens_entrant est un ensemble de noms de noeuds : si b appartient à cet ensemble,          on ajoute le lien a -> nouveau_noeud au graphe.                  """        self.noeuds.add(nouveau_noeud)        self.taille += 1        self.dico[nouveau_noeud] = liens_sortant        for k in liens_entrant:            self.dico[k].add(nouveau_noeud)                    def matrice(self):        """        renvoie une matrice d'adjacence associée au graphe        attention les numéros des noeuds sont donnés par l'ordre choisi par python pour        l'ensemble self.noeuds.                """        dico = {}        i=0        for k in self.noeuds:            dico[k]=i            i += 1        A = np.zeros([self.taille,self.taille])        for k in self.noeuds:            for l in self.dico[k]:                A[dico[k],dico[l]] = 1        return A            def est_oriente(self):        """        renvoie True si le graphe est orienté, False sinon.                """        A = self.matrice()        tA = A.transpose()        test = A==tA        if test.all():            return False        else:            return True        def test() -> None :        G = graph( {'a': {'b', 'c'}, 'b': {'d'}, 'c' : {'a'}, 'd':{'a'}})    print(G.dico['c'])    print(G.matrice())    print(G.est_oriente())test()