#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Author : Mathis PigassouCorrection des Travaux Pratiques :     TP 10 - methode de la dichotomie"""import numpy as npimport matplotlib.pyplot as plt import math as m# Exercice 1 def f(x) :    return x*m.exp(x)# Exercice 2 def tvi(f, a: int, b: int, eps: float) -> float :    """    Renvoie une valeur approchée à epsilon    près d'une solution de l'equation f (x) = 0 sur [a, b] .        """    u = a    v = b    c = (u+v)/2    while abs(f(c)) > eps :       if (f(c) > 0 and f(u) > 0) or (f(c) < 0 and f(u) < 0):            u = c       else:            v = c       c = (u+v)/2    return cdef f2(x) :    return x*m.exp(x)-1# Exercice 3def tvi_y(f, a: int, b: int, eps: float, y: int) -> float :    """     Renvoie la solution de f (x) = y à epsilon près.     Ajuste la fonction pour qu'elle recherche la racine de f(x)-y.        """    u = a    v = b    c = (u+v)/2    while abs(f(c)-y) > eps :        if (f(c)-y > 0 and f(u)-y > 0) or (f(c)-y < 0 and f(u)-y < 0):            u = c        else:            v = c        c = (u+v)/2    return c# Exercice 4def W(x,eps) :    return tvi_y(f,0,1,eps,x)def test_ex_1() -> None :        abscis = [x for x in range(-8,2)]    abscis2 = np.linspace(-8,1,1000)    ordo = [f(x) for x in abscis]     ordo2 = [f(x) for x in abscis2]    plt.plot(abscis, ordo)    plt.plot(abscis2, ordo2)    plt.showdef test_ex_2_et_3() -> None :        print(tvi(f2, 0,1,1e-11))    print(tvi_y(f2, 1,2,1e-11, 7))    def test_ex_4() -> None :        abscis = np.linspace(0,1,10000)    ordo_f = [f(x) for x in abscis]    ordo_x = [x for x in abscis]    ordo_W = [W(x,1e-10) for x in abscis]    plt.plot(abscis, ordo_f)    plt.plot(abscis, ordo_W)    plt.plot(abscis, ordo_x)    plt.show        