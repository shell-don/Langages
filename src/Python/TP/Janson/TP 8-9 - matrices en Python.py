#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Author : Mathis PigassouCorrection des Travaux Pratiques :     TP 8 - matrices en Python    TP 9 - matrices 2"""import numpy as npimport random as rd# Exercice 1def trace(A) -> int :    """    Calcul de la trace de A.        """    return np.trace(A)def det(A) -> int :    """    Calcul du determinant de A, matrice 2x2.        """    return A[0,0]*A[1,1]-A[0,1]*A[1,0]def val_moy(A) :    """     Calcul de la moyenne des elements de A^t * A.        """    return np.mean(np.dot(A.transpose(),A))# Exercice 2def val_moy_transpose(A) :    """     Calcul de la moyenne des elements de  A^-1t * A^-1.        """    return np.mean(np.dot(np.linalg.inv(A).transpose(),np.linalg.inv(A)))# Exercice 4def dilatation(p, i, a) :    """     Creer la matrice de Dilatation de taille p×p, qui n'a     que des 1 sur sa diagonale sauf en position i, où le    coeﬃcient est a.    Soit A une matrice.     D*A : la i-eme ligne de A est multiplié par a.    A*D :  la i-eme colonne de A est multiplié par a.        """    return np.diag([a if x == i else 1 for x in range(p)])def permutation(p, i, j):    """    Creer la matrice de Permutation de taille p×p,    qui ne contient que des 1 sur sa diagonale et des 0 ailleurs,     sauf aux positions i,i et j,j où le coeﬃcient est alors 0,     et aux positions i,j et j,i où le coeﬃcient est 1.    Soit A une matrice.     P*A : Permute les lignes i et j.    A*P : Permute les colonnes i et j.        """    P = np.eye(p)    P[[i, j]] = P[[j, i]]    return Pdef transvection(p, i, j, a) :    """     Creer la matrice de Transvection de taille p×p,    qui ne contient que des 1 sur sa diagonale, des 0 ailleurs    sauf en position i,j où le coeﬃcient vaut a.    Soit A une matrice.    T*A : ligne i + a*ligne j    A*T : colonne j + a*colonne i        """    T = np.eye(p)    T[i, j] = a    return T        # Exercice 6def colonne_nulle(A, j: int) -> bool :    """    Renvoie True si la colonne j de A est nulle, et False sinon.    """    if np.all(A[:, j] == 0) :        return True    else :        return False# Exercice 7def pivot_en_place(A) :    """     met en place un pivot non nul en position 0,0.        """    i, j = np.shape(A)    k = 0    for x in A[:,0] :        if x != 0 :            break         else :            k +=1    return np.dot(permutation(j, 0, k), A)# Exercice 8def elimination(A) :    """     Première étape du pivot.        """    i, j = np.shape(A)    for k in range(1, i) :        D = dilatation(i, k, A[0,0])        T = transvection(i, k, 0, -A[k,0])        A = np.dot(T,np.dot(D,A))    return A# Exercice 9def pivot_Gauss(A) :    """    Implémentation du Pivot de Gauss simplifie.    Pour A une matrice sans colonnes nulles.        """    i, j = np.shape(A)    if i == 1 :         return A    else :        A = pivot_en_place(A)        B = elimination(A)        C = B[1:, 1:]        C = pivot_Gauss(C)        B[1:, 1:] = C    return Bdef test() -> None :        # Exercice 1    A = np.array([[5,-1,2],[1,2,3]])    print(trace(A))    B = np.array([[1,-1],[1,3]])    print(det(B))        C = np.array([[rd.random() for x in range(100)] for x in range(100)])    print(val_moy(C))        # Exercice 2    print(val_moy_transpose(C))    # Exercice 5    D = np.array([[0,-1,1,2],[1,2,3,0],[-1,1,2,0]])    D = np.dot(D, permutation(4,0,3))    D = np.dot(permutation(3,1,2),D)    D = np.dot(transvection(3,2,1,-2), D)    print(D)        # Exercice 6    E = np.array([[0,0,1],[1,0,1],[1,0,0]])    print(colonne_nulle(E,1))        # Exercice 9    F = np.array([[0, 7,0], [0, 2,5],[1,9,3]])    print(pivot_Gauss(F))                                