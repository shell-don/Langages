#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Author : Mathis PigassouCorrection des Travaux Pratiques :     TP 11 - classes attributs et methodes"""import numpy as npimport matplotlib.pyplot as plt# Exercice 1, 2 et 3class Polynom :        degre ="-oo"    coeffs = []            def __init__ (self, liste_coeffs ) :        self.coeffs = liste_coeffs        nb_coeffs = 0        for x in reversed(liste_coeffs) :            if x != 0 :                nb_coeffs += 1        if all(c == 0 for c in liste_coeffs) :            self.degre = -1            self.coeffs = []        else :                 self.degre= nb_coeffs                    def __str__ ( self) :        return f"{self.coeffs}"            def coeff_dom(self) :        """ Methode        Renvoie le coefficient dominant du polynome.                """        return self.coeffs[-1]            def coeff(self, k) :        """ Methode        Renvoie le k-Ã¨me coefficient du polynome.                """        if k < 0 or k >= len(self.coeffs):            return 0        return self.coeffs[k] # Exercice 4    def __add__(self, other) :        """         Ajoute deux polynomes.                """        a = self.coeffs        b = other.coeffs        n = max(len(a), len(b))        c =[(a[k] if k < len(a) else 0) + (b[k] if k < len(b) else 0) for k in range(n)]        return Polynom(c)# Exercice 5     def evaluation(self, x) :        """ Methode        Evalue le polynome en x.                """        a = self.coeffs        e = 0        for k in range(len(a)) :            if k == 0 :                e += a[k]            else :                e += a[k]*(x**k)        return e        def test() -> None :        p = Polynom([1,-3,1,5])    abscis = np.linspace(-1,1,10000)    ordo = [p.evaluation(x) for x in abscis]    plt.plot(abscis, ordo)    plt.show test()