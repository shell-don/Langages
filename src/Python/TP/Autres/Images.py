#!/usr/bin/env python3# -*- coding: utf-8 -*-'''Author : Mathis PigassouChapitre 9 d'Exos-1 :Générations d'image bitmap : pbm (noir ou blanc), pgm (niveaux de gris), ppm (Couleurs).'''import mathdef gen_image(taille: tuple, extension: str, motif)  -> None :    '''    Parameters    ----------    taille : tuple        Définit la taille de l'image. (Colonne, Ligne)    extension : str        Définit le format de l'image.    motif : int        fonction qui définit la couleur d'un pixel en position (i, j) suivant un certain motif.    Returns    -------    None        Fichier avec l'en-tête correspondante.    '''    col, ligne = taille    with open(f"image.{extension}", "w" ) as im :        match extension :            case "pbm"  :                im.write(f"P1 \n{col} {ligne} \n")                for i in range(ligne) :                    for j in range(col) :                        coul = motif(i, j)                        im.write(f"{coul} ")                    im.write("\n")            case "pgm"  :                im.write(f"P2 \n{col} {ligne} \n255 \n")                for i in range(ligne) :                    for j in range(col) :                        coul = motif(i, j)                        im.write(f"{coul} ")                    im.write("\n")            case "ppm" :                im.write(f"P3 \n{col} {ligne} \n255 \n")                for i in range(ligne) :                    for j in range(col) :                        R, G, B = motif(i, j)                        im.write(f"{R} {G} {B} ")                    im.write("\n")            case _ :                print(f"Extension inconnue : {extension}")                def motif_1(i: int, j: int) -> int :    '''    Returns    -------    int        La couleur du pixel en position (i, j) (ligne, colonne).         Le résultat est compris entre 0 (blanc) et 1 (Noir).        Motif en noir et blanc.    '''    return (i+j)// 10 % 2def motif_2(i: int, j: int) -> int :    '''    Returns    -------    int        La couleur du pixel en position (i, j).        Le résultat est compris entre 0 (Noir) et 255 (Blanc).        Motif en niveaux de gris.    '''    return (i**2 + j**2) % 256def motif_3(i: int, j: int) -> tuple :    '''    Returns    -------    tuple        Les valeurs des niveaux de Rouge de Vert et de Bleu du pixel         en position (i,j). Plus la valeur se rapproche de 255 plus la couleur est présente.        Rouge = (255, 0, 0)        Motif en couleurs.    '''    R = (i*j) % 256    G = i % 256    B = (i + j) // 3 % 256    return (R,G,B)# Chat GPT À partir d'ICIdef motif_4(i: int, j: int) -> tuple:    '''    Returns    -------    tuple        Les valeurs des niveaux de Rouge, Vert et Bleu du pixel        en fonction d'un dégradé circulaire basé sur les coordonnées (i,j).        Ce motif crée un effet de couleur en dégradé circulaire.    '''    # Calculer la distance à partir du centre de l'image (point de référence)    x, y = i-2500 , j-2500  # Décalage pour centrer l'image (assume taille 256x256)            # Calculer les valeurs RGB selon un dégradé circulaire    angle = math.atan2(y, x)  # Angle de chaque pixel par rapport au centre    # Calculer des couleurs basées sur l'angle et la distance    R = int((math.sin(angle + 0) * 127 + 128) % 256)    G = int((math.sin(angle + 2 * math.pi / 3) * 127 + 128) % 256)    B = int((math.sin(angle + 4 * math.pi / 3) * 127 + 128) % 256)        return (R, G, B)def motif_5(i: int, j: int) -> tuple:    '''    Motif basé sur la fractale de Julia. Ce motif génère des motifs complexes et fascinants,    typiquement utilisés dans les fractales.    '''    c = complex(0.29, 0.5)      # Normaliser les coordonnées    z = complex((i - 1200) / 1200.0, (j - 1600) / 1600.0)          max_iter = 256    for n in range(max_iter):        z = z**2 + c        if abs(z) > 2:            break        gris = int((n / max_iter) * 255)    return palette_niveaux_de_gris(gris)def palette_niveaux_de_gris(val: int) -> tuple:    """    Génère une couleur en niveau de gris.        Paramètre :    ----------    val : int        Intensité entre 0 (noir) et 255 (blanc).            Retourne :    --------    tuple        Une couleur en niveau de gris (R, G, B).    """    # Appliquer une transformation gamma (exponentielle)    val = max(0, min(255, val))    lisse = int((val / 255) ** 0.7 * 255)  # La valeur 0.7 adoucit les transitions    return (lisse, lisse, lisse)# Testgen_image((300,200), "pbm", motif_1)#gen_image((200,200), "pgm", motif_2)#gen_image((200,200), "ppm", motif_3)#gen_image((5120,3328), "ppm", motif_5)