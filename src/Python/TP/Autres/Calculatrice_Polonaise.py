#!/usr/bin/env python3# -*- coding: utf-8 -*-'''Author : Mathis PigassouChapitre 16 d'Exos-1 :Création d'une calculatrice polonaise.'''pile: list = []def empile(element: any) -> None :    '''    Ajoute l'element, 'element' de type quelconque à la pile.        '''    global pile    return pile.append(element)def depile() -> any :    '''    retire l'élément au sommet de la pile et renvoie sa valeur.        '''    global pile    return pile.pop()    def pile_est_vide() -> bool :    '''   Vraie si la pile est vide, faux sinon       '''    if not pile :        return True    else :        return False    def pile_contient(element: any) -> bool :    '''    Vraie si la pile contient l'element, faux sinon.        '''    if element in pile :        return True    else :        return False    def avant_dernier(pile: list) -> any :    '''    Return l'avant-dernier élément de la pile, ou None si cet élément n'existe pas.        '''    if len(pile) < 2:          return None    return pile[1]def tri_wagons(train: str) -> str :    '''    Sépare les wagons bleus (entier) et rouges (lettres) d'un train.        '''    wagons_bleu: str = ""    wagons = train.split()    for x in wagons :        if x.isdigit() :            wagons_bleu += x + " "        else :             empile(x)            wagons_rouge: str = ""    for x in range(len(pile)) :        wagons_rouge += depile() + " "    return wagons_bleu+wagons_rougedef operation(a: int, b: int, op: str) -> int :    '''    Renvoie le résultat de l’opération entre a et b.        '''    match op :        case "+" :            return a+b        case "*" :            return a*b        case "-" :            return a-b        case "/" :            return a // b        case _ :            return ValueError    def calculatrice_polonaise(exp: str) -> int :    '''    Calculatrice polonaise calculant des expressions en écriture polonaise    avec les opérations basiques : x, +, -, /.    '''    for x in exp.split() :        if x.isdigit() :            empile(x)        if x == "+" or x == "*" or x == "-" or x == "/" :            b = depile()            a = depile()            empile(operation(int(a),int(b), x))    return pile[0]                def parentheses_correctes(exp: str) -> bool :    '''    Verifie si les parenthèses dans l'expression sont bien placées.    '''    for x in exp :         if x == "("  :            empile(x)        elif x == ")"  :            if pile_est_vide() :                return False            else :                 depile()                  if pile_est_vide() :        return True    else :        return False    def crochets_parentheses_correctes(exp: str) -> bool :    '''    Verifie si les parenthèses et les crochets dans l'expression sont bien placées.    '''    for x in exp :         match x :            case "("  | "[" :                 empile()            case ")" | "]" :                if pile_est_vide() :                    return False                else :                    tmp = depile()                    if tmp != "(" or tmp != "[" :                        return False        if pile_est_vide() :         return True    else :        return False   def ecriture_polonaise(exp: str) -> str :    '''    Renvoie l'expression en notation polonaise.        '''    polonaise: list = []      nombre: str = ""        for x in exp :               if x == " " :            continue                if x.isdigit() :            nombre += x        else :            if nombre :                polonaise.append(nombre)                nombre = ""              if x == "(" :                pile.append(x)            elif x == "*" or x == "/" :                pile.append(x)            elif x == "+" :                while not pile_est_vide() :                    tmp = pile.pop()                    if tmp == "*" :                        polonaise.append(tmp)                    else :                        pile.append(tmp)                        break                pile.append("+")            elif x == "-"  :                while not pile_est_vide() :                    tmp = pile.pop()                    if tmp == "*" :                        polonaise.append(tmp)                    else :                        pile.append(tmp)                        break                pile.append("-")            elif x == ")" :                while not pile_est_vide() :                    tmp = pile.pop()                    if tmp == "(" :                        break                    else :                        polonaise.append(tmp)    if nombre :        polonaise.append(nombre)    while not pile_est_vide() :        polonaise.append(pile.pop())    return " ".join(polonaise)     # Test# Plusieurs expressions ne peuvent pas être calculé en même temps# car la pile est une variable globale. Sauf dans le cas où la pile est ré-initialisé.exp = "( 17 * ( 2 + 3 ) ) + ( 4 - ( 8 / 5 ) )"print(eval(exp))print(calculatrice_polonaise(ecriture_polonaise(exp)))pile: list = []exp2 = "( 17 * ( 2 + 3 ) ) + ( 4 + ( 8 * 5 ) )"print(eval(exp2))print(calculatrice_polonaise(ecriture_polonaise(exp2)))